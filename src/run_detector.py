# -*- coding: utf-8 -*-
"""Object detection for scene analysis

Automatically generated by Colaboratory.

Adapted by MME from:
https://colab.research.google.com/github/tensorflow/hub/blob/master/examples/colab/object_detection.ipynb

"""

#@title Imports and function definitions

# for running inference on the TF-Hub module.
import tensorflow as tf
import tensorflow_hub as hub

# for image processing
import numpy as np
from PIL import Image
from PIL import ExifTags

# for opening HEIF images
from pillow_heif import register_heif_opener
register_heif_opener()

# additional imports for idnetifying image files and saving
import sys, os
import pandas as pd


# DEFINE DETECTOR

#MODULE_HANDLE = "https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1"
MODULE_PATH = '/Users/mme/data/tf_models/faster_rcnn_openimages_v4_inception_resnet_v2_1'
DETECTOR = hub.load(MODULE_PATH).signatures['default']
#print(hub.resolve(MODULE_HANDLE))


def listdir_by_ext(d, valid_ext=None, subdirs=True):

    fns = []

    for path, subdirs, files in os.walk(d):
        for name in files:
            fns.append(os.path.join(path, name))

    if valid_ext is not None:
        fns = [fn for fn in fns if os.path.splitext(fn)[-1].lower() in valid_ext]

    return fns


for ORIENTATION_TAG in ExifTags.TAGS.keys():
    if ExifTags.TAGS[ORIENTATION_TAG]=='Orientation':
        break


def correct_orientation(image):

    try:
        
        exif=dict(image._getexif().items())

        if exif[ORIENTATION_TAG] == 3:
            image=image.rotate(180, expand=True)
        elif exif[ORIENTATION_TAG] == 6:
            image=image.rotate(270, expand=True)
        elif exif[ORIENTATION_TAG] == 8:
            image=image.rotate(90, expand=True)

    except (AttributeError, KeyError, IndexError):
        # cases: image don't have getexif
        pass

    return image


def image_from_file(fn, shape=(224, 224), normalize=True):
    """Get raw image from filename"""
    
    with Image.open(fn) as image:

        try:
            image = correct_orientation(image)
        except:
            pass

        image = image.resize(shape, resample=Image.BILINEAR)
        imagearr = np.array(image)

        if np.shape(imagearr)[-1] == 4:
            imagearr = imagearr[:, :, :3]

        imagetensor = tf.image.convert_image_dtype(
            imagearr,
            dtype=tf.float32
        )

    return imagetensor


def load_and_detect(fn, detector=DETECTOR, shape=(640, 480), min_detect_score=0.1):

    print('Running detection for', fn)

    try:
        img = image_from_file(fn, shape)[tf.newaxis, ...]
    except:
        print('Failed loading', fn)
        return []
    
    result = detector(img)
    result = {key:value.numpy() for key,value in result.items()}

    result = [
        {'filename': fn, 'object': ent.decode('utf-8')}
        for ent, score in zip(
            result['detection_class_entities'],
            result['detection_scores']
        )
        if score > min_detect_score
    ]

    return result


def main():

    filenames = listdir_by_ext(
        sys.argv[1],
        valid_ext=['.jpg', '.jpeg', '.png', '.heic']
        )

    results = [line for fn in filenames for line in load_and_detect(fn)]
    results = pd.DataFrame(results)

    results.to_csv('../outputs/detected_long.csv')
    results.groupby(['filename', 'object']).size().unstack().fillna(0.).to_csv(
        '../outputs/detected_wide.csv'
    )


if __name__ == '__main__':
    main()
